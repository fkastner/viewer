type Space {
  uid: ID!
  name: String!
  description: String!
  traits: [Trait!]!
}

type Property {
  uid: ID!
  name: String!
  description: String!
}

type Trait {
  property: Property!
  value: Boolean!
  description: String!
}

type Theorem {
  uid: ID!
  if: String!
  then: String!
  description: String!
}

type User {
  name: String!
}

type Viewer {
  spaces: [Space!]!
  properties: [Property!]!
  theorems: [Theorem!]!
  version: String!
}

type Query {
  me: User
  viewer(version: String): Viewer!
}

input CreateSpaceInput {
  name: String!
}

input CreatePropertyInput {
  name: String!
}

type Mutation {
  createSpace(input: CreateSpaceInput): Viewer
  createProperty(input: CreatePropertyInput): Viewer
}

schema {
  query: Query
  mutation: Mutation
}